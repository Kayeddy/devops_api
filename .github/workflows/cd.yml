name: CD Pipeline

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: read
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Create MongoDB Memory Server cache directory
      run: mkdir -p /home/runner/.cache/mongodb-binaries
      
    - name: Cache MongoDB binaries
      uses: actions/cache@v3
      with:
        path: /home/runner/.cache/mongodb-binaries
        key: ${{ runner.os }}-mongodb-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-mongodb-
    
    - name: Update Jest timeout in dbHandler
      run: |
        sed -i 's/mongoServer = await MongoMemory.create()/mongoServer = await MongoMemory.create({ binary: { downloadTimeout: 180000 } })/' src/__tests__/helpers/dbHandler.ts
        sed -i 's/jest.setTimeout(120000);/jest.setTimeout(300000);/' src/__tests__/models/bike.test.ts || true
        sed -i 's/jest.setTimeout(120000);/jest.setTimeout(300000);/' src/__tests__/models/car.test.ts || true
        sed -i 's/jest.setTimeout(120000);/jest.setTimeout(300000);/' src/__tests__/models/user.test.ts || true
    
    - name: Update coverage thresholds to 85% for production
      run: |
        sed -i 's/branches: 60/branches: 85/' jest.config.js
        sed -i 's/functions: 60/functions: 85/' jest.config.js
        sed -i 's/lines: 60/lines: 85/' jest.config.js
        sed -i 's/statements: 60/statements: 85/' jest.config.js
    
    - name: Run tests with production coverage threshold (85%)
      run: npm test
      env:
        CI: true
        MONGODB_URI: mongodb://localhost:27017/test
        NODE_OPTIONS: --max_old_space_size=4096
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      
  deploy:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        install: true
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract repository name to lowercase
      run: |
        echo "REPO_NAME=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
    
    - name: Extract version
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_ENV
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        target: production
        tags: |
          ghcr.io/${{ env.REPO_NAME }}/devops-api:${{ env.VERSION }}
          ghcr.io/${{ env.REPO_NAME }}/devops-api:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Notify about successful deployment
      run: |
        echo "Docker image has been built and pushed to GitHub Container Registry"
        echo "Version ${{ env.VERSION }} has been published"
        echo "Deployment will be handled automatically by Railway's GitHub integration" 